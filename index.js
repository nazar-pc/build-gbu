// Generated by LiveScript 1.5.0
/**
 * @package build-gbu
 * @author  Nazar Mokrynskyi <nazar@mokrynskyi.com>
 * @license 0BSD
 */
(function(){
  var browserify, del, gulp, gutil, rename, tap, uglifyEs, uglify, DESTINATION;
  browserify = require('browserify');
  del = require('del');
  gulp = require('gulp');
  gutil = require('gulp-util');
  rename = require('gulp-rename');
  tap = require('gulp-tap');
  uglifyEs = require('uglify-es');
  uglify = require('gulp-uglify/composer')(uglifyEs, console);
  DESTINATION = 'dist';
  module.exports = build;
  /**
   * @param {string}					source				Source file Browserify will work with
   * @param {string}					standalone			Corresponds to Browserify option with the same name
   * @param {string}					output_file_name	Base name for output file in `dist` directory
   * @param {(string|!Array<string>)}	ignore				Dependencies to ignore by Browserify (its `ignore()` method)
   * @param {!Object}					gulp_instance		Your gulp instance in case you want to integrate this with your own tasks
   */
  function build(source, standalone, output_file_name, ignore, gulp_instance){
    ignore == null && (ignore = []);
    gulp_instance == null && (gulp_instance = gulp);
    gulp_instance.task('build', ['clean', 'browserify', 'minify']).task('browserify', ['clean'], function(){
      return gulp.src(source, {
        read: false
      }).pipe(tap(function(file){
        file.contents = browserify({
          entries: file.path,
          standalone: standalone
        }).ignore(ignore).bundle();
      })).pipe(rename({
        basename: output_file_name
      })).pipe(gulp.dest(DESTINATION));
    }).task('clean', function(){
      return del(DESTINATION);
    }).task('minify', ['browserify'], function(){
      return gulp.src(DESTINATION + "/*.js").pipe(uglify()).on('error', function(err){
        gutil.log(gutil.colors.red('[Error]'), err.toString());
      }).pipe(rename({
        suffix: '.min'
      })).pipe(gulp.dest(DESTINATION));
    });
  }
}).call(this);
